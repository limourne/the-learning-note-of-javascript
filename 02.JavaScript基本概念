1.语句
定义：语句（statement）是为了完成某种任务而进行的操作。JavaScript程序的执行单位为行（line），也就是一行一行地执行。一般情况下每一行就是一个语句。
例：var a = 1 + 3;
这条语句先用var命令，声明了变量a，然后将1+3的运算结果赋值给变量a。语句以分号结尾，一个分号就表示一个语句结束。多个语句可以写在一行内。
1 + 3叫做表达式（expression），值一个为了得到返回值的计算式，语句和表达式的区别在于，前者主要为了进行某种操作，一般情况下不需要返回值；后者则是为了得到返回值，一定会返回一个值。凡是JavaScript语言中预期为值得地方，都可以使用表达式。

2.变量
2.1 定义：变量是用于存储信息的“容器”，变量的值可以在整个程序中被修改。
变量声明： var x;
注意：x 与 X 不是同一个变量，JavaScript区分大小写。
2.2 “赋值”运算符：等号“=”为JavaScript中的赋值运算符，而不是“等于”运算符。
例： var x = 6;
    var y = 7;
    x = y;
2.3 变量命名规则：1.由字母、数字、下划线、$符号（不建议使用）组成，不能以数字开头
            2.不能是关键字和保留字，例如：for,while,this,name
            3.区分大小写
            4.不能是算数运算符
            5.不能是任何特殊符号，如#num，%num等
变量命名规范：1.变量名必须有意义
            2.遵守驼峰命名法
            3.从实践中总结
2.4变量提升（hoisting）：JavaScript在运行时会先解析代码，获取所有被声明的变量，然后再一行一行地运行。因此所有声明变量的语句都会被提升到代码的头部，这就叫做代码提升（hoisting）。

3.区块
定义：JavaScript使用大括号{}将多个相关的语句组合在一起，成为“区块”（block）。
对于var命令来说，JavaScript的区块不构成单独的作用域（scope）。
{ var a = 1;
} 
a // 1
在上面的代码中，虽然var命令在代码块内部赋值了变量a，但在区块外部，变量a依然有效。在JavaScript中，区块往往用来构成其他更复杂的语法结构，如for、of、while、function等。

4.JavaScript数据类型
4.1 JavaScript有五种基本数据类型：字符串（string）、数字（number）、布尔（boolean）、空（null）、未定义（undefined）和一种复杂数据类型：对象（object）。JavaScript中的变量是没有数据类型的，只有值才有。变量可以随时持有任何类型的值。ES6中新增了一种符号（symbol）的
基本数据类型。
4.2 typeof运算符：可以用来查看值的类型，它返回的是类型的字符串值。
typeof undefined === "undefined" // true
typeof true === "boolean" // true
typeof 42 === "number" // true
typeof "42" === "string" // true
typeof {lift:42} === "object" // true
typeof Symbol() === "symbol" // true
typeof null === "object" // true   这是一个bug，正确的返回结果应该是"null"这个bug已经存在了二十年左右。
4.3 null与undefined的区别：null是表示一个“空”的对象，转为数值时为0；undefined是一个表示“此处无定义”的原始值，转为数值时为NaN.
4.4 布尔值代表”真“和”假“两个状态，”真“用关键字”true“表示，”假“用关键字”false“表示。布尔值只有这两个值。布尔值常常用于程序流程的控制。
下列运算符会返回布尔值：两元逻辑运算符：&&，||
                    前值逻辑运算符：！
                    相等运算符：===，！==，==，！=
                    比较运算符：>，>=，<，<=
如果JavaScript预期某个位置应该是布尔值，会将该位置上现有的值自动转为布尔值。转换规则是除了下面六个值被转为false，其他值都视为true。
undefined
null
false
0
NaN
""或‘’
4.5 数值：JavaScript只有一种数值类型。数值可以带小数点，也可以不带。极大或极小的数字可以通过科学（指数）计数法来书写。 
var y = 123e5  // 12300000
var z = 123e-5  // 0.00123
4.6 字符串是存储字符的变量。可以是引号中的任意文本，可以使用单引号或双引号。
使用单引号括起来的字符串中，如果要包含单引号须使用反斜杠（\）转义处理字符串中的单引号。
使用双引号括起来的字符串中，如果要包含双引号须使用反斜杠（\）转义处理字符串中的双引号。
var sayHello = '你好 W3Cschool \'我是一名JavaScript程序员.\' ';

5.算术运算符
+ 加法
- 减法
* 乘法
/ 除法
% 取模（余数）        // 支持浮点数
++ 自增
-- 自减
x++ : 返回x的值，然后+1
++x : 使x=x+1，然后返回x

6.三元运算符 ?
6.1 式子：（条件）？表达式1：表达式2
如果“条件”为true，则返回”表达式1“的值，否则返回"表达式2"的值。

7.比较运算符
==   等于
===  绝对等于（值和类型均相等）
！=   不等于
！==  绝对不等于（值或类型不相等）
>    大于
<    小于
>=   大于等于
<=   小于等于

8.逻辑运算符
&&  and  左右两者同为True时，结果为True，只要有一个False，就返回False。
||  or   左右只要有一个True，就返回True，左右两者同为False时，结果为False。
！  not  对运算符右侧的值先转为布尔值，再取反。
<html>
   <head>
     <title>三目运算符</title>
   </head>
   <body>
    <script>
    var age = 16;
    var isAdult = (age < 18) ? "未成年人": "成年人";
    document.write(isAdult);
   </script>
   </body>
</html>
运行结果：
未成年人


9.赋值运算符
赋值（=）    x = y   x = y
加赋值（+=） x += y  x = x + y
减赋值（-=） x -= y  x = x - y
乘赋值（*=） x *= y  x = x * y
除赋值（-=） x /= y  x = x / y
模赋值（-=） x %= y  x = x % y
指数赋值（**=） x **= y  x = x ** y
左移赋值（<<=） x <<= y  x = x << y
右移赋值（>>=） x >>= y  x = x >> y
无符号右移赋值（>>>=） x >>>= y  x = x >>> y
换位与赋值（&=）   x &= y  x = x & y
换位异或赋值（^=） x ^= y  x = x ^ y
换位或赋值(|=)    x |= y  x = x | y

10.JavaScript字符串
10.1 字符串索引：
var coursename = "JavaScript 微课";
var coursename = 'JavaScript 微课';
var character = coursename[5];
运行结果：
c
字符串索引从0开始，这意味着第一个字符索引值为[0]，第二个为[1]，以此类推。
10.2 在字符串中可以使用转义字符转义的特殊字符：
\'  单引号
\"  双引号
\\  反斜杠
\n  换行
\r  回车
\t  tab（制表符）
\b  退格符
\f  换页符
10.3 字符串长度 txt.length
var txt = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
var sln = txt.lrngth; // 26
10.4 字符串连接符 +
var str1 = '1+1';
var str2 = '=2';
document.write(str1 + str2);
运行结果
1+1=2
10.5 字符串中插入变量 + 
var str1 = '1+1=';
var str2 = ""+str1+" 2";
document.write(str1 + str2);
运行结果
1+1=2
10.6 在一个字符串创建完成之后，它的字面量string literal的各个字符都不能被改变，改变它的唯一方法是重新给它赋一个值。
var myStr = "Bob";
myStr[0] = "J"; // myStr 依然是 Bob

var myStr = "Bob";
myStr = "Job"; // myStr 值为 Job
