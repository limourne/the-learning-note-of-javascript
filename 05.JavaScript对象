1. JavaScript 对象
1.1 JavaScript 对象是拥有属性和方法的数据。
1.1.1 真是生活中，一辆汽车是一个对象。
对象有它的属性，如重量和颜色等，方法有启动、停止等。
所有汽车都有这些属性，但是每款车的属性都不尽相同。
所有汽车都拥有这些方法，但是它们被执行的时间都不尽相同。
1.1.2 JavaScript 中一切皆对象：字符串、数值、数组、函数...此外， JavaScript 也允许自定义对象。
对象只是带有属性和方法的特殊数据类型。
1.1.3 对象定义
var person = {
  name:"John", age:31,
  favColor:"green", height: 183
}
定义 JavaScript 对象可以跨越多行，空格跟换行不是必须的。

1.2 JavaScript 对象属性
1.2.1 可以说“JavaScript 对象是变量的容器”。
但是，我们通常认为“JavaScript 对象是键值对的容器”。
键值对通常写法为 name : value （键与值以冒号分割）。
键值对在 JavaScript 对象通常成为对象属性。
1.2.2 访问对象属性
可以通过两种方法访问对象属性：
objectName.propertyName
// 或者
objectName['propertyName']
例：
var person = {
  name:"John", age: 31,
  favColor:"green", height: 183
};
var x = person.age; // 返回 John
var y = person['age']; // 返回 John
两种方法的区别：
1.点方法后面跟的必须是一个指定的属性名称，而中括号方法里面可以是变量。例如
var haha ="name";
console.log(obj.haha); // undefined
console.log(obj[haha]); // cedric
2.中括号方法里面的属性可以是数字，而点方法后面的属性名不可以是数字
3.当动态为对象添加属性时，必须使用中括号[]，不可用点方法
1.2.3 更新对象属性
依然可以用.或者[]来更新对象的属性。例如
var ourDog = {"name":"Camper", "Legs": 4,"tails": 1, "friends":["everything!"]};
ourDog.name="Happy Camper";
ourDog["name"]="Happy Camper";
1.2.4 添加对象属性
ourDog.bark = "bow-wow";
// 等价于 ourDog['bark'] = "bow-wow";
1.2.5 删除对象属性
var c1 = ourDog['tails']; // ci 等于 1
// 删除 tails 属性
delete ourDog['tails']; // 等价于 delete ourDog.tails
var c2 = ourDog['tails']; // c2 等于 undefined
1.2.6 对象方法
方法是作为对象属性存储的函数。
格式： 对象名.方法名(),例如
var message = "Hello world!";
var x = message.toUpperCase(); // 返回 HELLO WORLD!
使用[]读取对象属性
var myObj = {
"name": "Loen",
"age": "28",
"eat": function(){
    return "I'm eating";
    }
};
myObj["name"]; // Loen

var a = 'age';
myObj[a]; // 还可以用变量访问对象属性，这是返回 28

myObj['eat']; // 返回 I‘m eating

2. 对象构造器
2.1 例：
function person(firstname, lastname, age, eyecolor)
{
    this.firstname = firstname;
    this.lastname = lastname;
    this.age = age;
    this.eyecolor = eyecolor;
}
在 JavaScript 中，this 通常指向的是我们正在执行的函数本身，或者是指向该函数所属的对象（运行时）。
2.2 创建 JavaScript 对象实例
var myFather = new person("John","Doe",50,"blue");
var myMother = new person("Sally","Rally",48,"green");
document.write(myFather.age); // -> 50
document.write(myMother.name); // -> Sally
2.3 创建对象(省去了属性声明)
function person(name,age) {
  this.name = name;
  this.age = age;
}
var John = new person("John", 25);
var Loen = new person("Loen", 28);

3. 对象初始化
3.1 例
var John = {name:"John", age: 25};
var Loen = {name:"Loen", age: 28};
document.write(Loen.age); // 访问属性和方法的语法不会改变。

4.添加方法
4.1 方法是存储在对象属性中的函数。
语法：
methodName : function() { code lines } // 创建对象函数
objectName.methodName() // 访问对象函数
例：
function person(name, age) {
  this.name = name;
  this.age = age;
  this.changeName = function (name) {
    this.name = name;
  }
}

var p = new person("Loen", 28);
p.changeName("John"); 
4.2 在构造函数外部定义一个函数，通过函数名关联到对象的属性上：
function person(name, age) {
  this.name = name;
  this.age = age;
  this.yearOfBirth = bornYear; // 关联 bornYear 函数
}
function bornYear() {
  return new Date().getFullYear() - this.age; // 将函数关联到对象属性时不需要写括号
}
new Date().getFullYear()是获取今年完整的年份时间。
4.3 调用方法
var p = new person("Loen", 29);
document.write(p.yearOfBirth()); // 通过对象的属性名来调用函数











