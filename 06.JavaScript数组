1. Arrau（数组）对象
1.1 数组对象是使用单独的变量名来存储一系列的值。
创建数组：
var mycars = new Array("Saab","Volvo","BMW");

1.2 动态添加元素
var mycars = new Array();
mycars[0] = "Saab";
mycars[1] = "Volvo";
mycars[2] = "BMW";
mycars[3] = "Lincoln";  // 您可以添加任意数量的元素
字面量语法创建数组：
var mycars = ["Saab","Volvo","BMW"]; // 推荐使用

1.3 访问数组
var mycars = new Array("Saab","Volvo","BMW");
var name = myCars[0]; // name 的值为 Saab
mycars[1] = "Tsela"; // 现在数组的第二个元素为 Tsela
var newCar = mycars[6]; // 返回 undefined;

2. 数组属性
2.1 length属性
var courses = ["HTML","CSS","JS"];
document.write(courses.length); // 输出结果 3

3. 数组方法1
3.1 push()方法
var a = [];
a.push("zero"); // 在末尾添加一个元素.
a.push("one","two"); // 再添加两个元素，这时 a = ["zero","one","two"]

3.2 pop()方法
var oneDown = [1,4,6].pop(); // 现在 oneDown 的值为 6，数组变成了 [1,4]

3.3 shift()方法
var oneDown = [1,4,6].shift(); // 现在 oneDown 的值为 1，数组变成了[4,6]

3.4 unshift()方法
var a =["zero"];
a.unshift("one"); // a = [ "one", "zero" ]

3.5 concat()方法
var c1 = ["HTML","CSS"];
var c2 = ["JS","Python"];
var courses = c1.concat(c2); // 现在 courses 数组包含四个元素(HTML,CSS,JS,Python)
concat 操作不会影响c1和c2数组 - 它会将所产生的链接作为新数组返回。

4. 数组方法2
4.1 forEach方法
var numbers = [64, 45, 72, 11, 49];
// item 传递的是数组的值， index 传递的是索引
function myFunction(item, index) {
    demo.innerHTML = demo.innerHTML + "index[" + index + "]: " + item + "<br>";
}
numbers.forEach(myFunction); // forEach() 方法用于调用数组的每个元素，并将元素传递给回调函数
运行结果：
index[0]:64
index[1]:45
index[2]:72
index[3]:11
index[4]:49

4.2 indexOf() 方法
var fruits = ["香蕉", "橙子", "苹果", "甜瓜", "苹果"];
var a = fruits.indexOf("苹果")
// a 的值为 2
var b = fruits.indexOf("樱桃")
// b 的值为 -1

4.3 slice()方法
语法：
array.slice(start, end)

start：可选，规定从何处开始选取。如果是负数，那么它规定从数组尾部开始算起的位置。也就是说，-1指最后一个元素，-2指倒数第二个元素，以此类推。
end：可选，规定从何处结束选取。该参数是数组片段结束处的数组下标。如果没有指定该参数，那么切分的数组包含从start到数组结束的所有元素，如果这个参数是负数，那么它规定的是从数组尾部开始算起的元素。
例：
var fruits = ["Banana", "Orange", "Lemon", "Apple", "Mango"];
var citrus = fruits.slice(1,3); // 数组 citrus 包含的元素有 (Orange,Lemon) 含左不含右

5.1 关联数组
5.1.1 虽然 JavaScript 不支持关联数组，但仍可以使用命名数组语法。例如
var person = []; // 空数组
person["name"] = "Loen";
person["age"] = 28;
document.write(person["age"]);
// -> 28
现在，person 被视为一个对象，而不是一个数组。
命名索引 "name" 和 "age" 成为 person 对象的属性。
5.1.2 JavaScript 不支持使用名称索引数组。
在 JavaScript 中，数组总是使用数字编号的索引。
当您希望索引为字符串（文本）时，最好使用对象。
当您希望索引为数字时使用数组。
提示：如果使用名称索引，JavaScript 将会将数组重新定义为标准对象。
